Index: chrome-extension/js/injectors/fondueInjector.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chrome-extension/js/injectors/fondueInjector.js	(date 1484779740000)
+++ chrome-extension/js/injectors/fondueInjector.js	(revision )
@@ -10,9 +10,14 @@
         this.totalInvocations = 0;
       };
 
-      FondueBridge.MAX_LOG_COUNT = 3000;
-      FondueBridge.MAX_STACK_DEPTH = 20;
-      FondueBridge.EMIT_INTERVAL_MILLIS = 3000;
+      // FondueBridge.MAX_LOG_COUNT = 3000;
+      // FondueBridge.MAX_STACK_DEPTH = 20;
+      // FondueBridge.EMIT_INTERVAL_MILLIS = 3000;
+
+
+      FondueBridge.MAX_LOG_COUNT = 999999;
+      FondueBridge.MAX_STACK_DEPTH = 999999;
+      FondueBridge.EMIT_INTERVAL_MILLIS = 2000;
 
       FondueBridge.prototype = {
         constructor: FondueBridge,
@@ -143,35 +148,33 @@
               }
 
               invocation.node = node;
-              if (node.domQuery || this.isDomQueryNode(node)) {
-                invocation.callStack = unravelAgent._(__tracer.backtrace({
-                  invocationId: invocation.invocationId,
-                  range: [0, FondueBridge.MAX_STACK_DEPTH]
-                })).reverse();
+              // if (node.domQuery || this.isDomQueryNode(node)) {
+              invocation.callStack = unravelAgent._(__tracer.backtrace({
+                invocationId: invocation.invocationId,
+                range: [0, FondueBridge.MAX_STACK_DEPTH]
+              })).reverse();
 
-                //Remove the last item on the stack, === the invocation
-                if (invocation.callStack.length > 0) {
-                  invocation.callStack.pop();
-                }
-              } else {
-                invocation.callStack = [];
+              //Remove the last item on the stack, === the invocation
+              if (invocation.callStack.length > 0) {
+                invocation.callStack.pop();
               }
+              // } else {
+              //   invocation.callStack = [];
+              // }
             }, this);
 
             // if (arrInvocations.length < FondueBridge.MAX_LOG_COUNT) {
-            if (unravelAgent.scriptLoadComplete) {
-              __tracer.softReset(this.logHandle);
-            }
+            // if (unravelAgent.scriptLoadComplete) {
+            //   __tracer.softReset(this.logHandle);
+            // }
             // }
 
-            var logLength = __tracer.getLogLength(this.logHandle);
-            if (logLength > 10000) {
-              console.log("Remaining Log Length is too large:", logLength, "... clearing.");
-              this.updateTrackedNodes();
-              __tracer.softReset(this.logHandle);
-              // __tracer.clearLogs(this.logHandle);
-            }
-
+            // var logLength = __tracer.getLogLength(this.logHandle);
+            // if (logLength > 10000) {
+            //   console.log("Remaining Log Length is too large:", logLength, "... clearing.");
+            //   this.updateTrackedNodes();
+            //   __tracer.softReset(this.logHandle);
+            // }
 
             window.dispatchEvent(new CustomEvent("fondueDTO", {
                 detail: {
Index: tests/public/javascripts/code-runs.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/public/javascripts/code-runs.js	(revision )
+++ tests/public/javascripts/code-runs.js	(revision )
@@ -0,0 +1,27 @@
+var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
+  lineNumbers: true,
+  styleActiveLine: true,
+  matchBrackets: true,
+  theme: "monokai"
+});
+var input = document.getElementById("select");
+function selectTheme() {
+  var theme = input.options[input.selectedIndex].textContent;
+  editor.setOption("theme", theme);
+  location.hash = "#" + theme;
+}
+var choice = (location.hash && location.hash.slice(1)) ||
+  (document.location.search &&
+  decodeURIComponent(document.location.search.slice(1)));
+if (choice) {
+  input.value = choice;
+  editor.setOption("theme", choice);
+}
+
+CodeMirror.on(window, "hashchange", function () {
+  var theme = location.hash.slice(1);
+  if (theme) {
+    input.value = theme;
+    selectTheme();
+  }
+});
\ No newline at end of file
Index: tests/public/lab/index.jade
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/public/lab/index.jade	(revision )
+++ tests/public/lab/index.jade	(revision )
@@ -0,0 +1,26 @@
+html(lang='en')
+  head
+    script(src='/javascripts/lib/jquery-2.1.4.js')
+    script(src='/javascripts/lib/underscore-min.js')
+    script(src='/javascripts/lib/moment.js')
+
+    script(src='/javascripts/lib/codemirror-5.23.0/lib/codemirror.js')
+    script(src='/javascripts/lib/codemirror-5.23.0/mode/javascript/javascript.js')
+    script(src='/javascripts/lib/codemirror-5.23.0/addon/selection/active-line.js')
+    script(src='/javascripts/lib/codemirror-5.23.0/addon/edit/matchbrackets.js')
+
+    link(href='/stylesheets/bootstrap.min.css', rel='stylesheet')
+    link(href='/stylesheets/style.css', rel='stylesheet')
+    link(href='/javascripts/lib/codemirror-5.23.0/lib/codemirror.css', rel='stylesheet')
+    link(href='/javascripts/lib/codemirror-5.23.0/theme/monokai.css', rel='stylesheet')
+    link(rel='icon', href='/img/favicon.ico', type='image/x-icon')
+    link(rel='shortcut icon', href='/img/favicon.ico', type='image/x-icon')
+
+  body(style="padding:1em")
+
+    form
+      textarea#code(name='code')
+        | var foo = "bar";
+
+
+    script(id="postbody", src='/javascripts/code-runs.js')
\ No newline at end of file
Index: tests/public/demo/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/public/demo/index.html	(date 1484779740000)
+++ tests/public/demo/index.html	(revision )
@@ -1,1 +1,1 @@
-<html lang="en"><head><script src="/javascripts/lib/jquery-2.1.4.js"></script><script src="/javascripts/lib/underscore-min.js"></script><script src="/javascripts/lib/moment.js"></script><link href="/stylesheets/bootstrap.min.css" rel="stylesheet"/><link href="/stylesheets/style.css" rel="stylesheet"/><link rel="icon" href="/img/favicon.ico" type="image/x-icon"/><link rel="shortcut icon" href="/img/favicon.ico" type="image/x-icon"/></head><body style="padding:1em"><div class="row"><div class="col-xs-12"><button id="test1" class="btn btn-success">Show / Hide</button></div></div><br/><div class="row"><div class="col-xs-12"><img id="effect1" src="/img/waves.png" height="50"/></div></div><br/><div class="row"><div class="col-xs-12"><button id="test2" class="btn btn-primary">Moment Call</button></div></div><div class="row"><div class="col-xs-4"><br/><div id="effect2" style="min-height: 1em; "></div></div></div><br/><div class="row"><div class="col-xs-12"><button id="test3" class="btn btn-warning">Animate</button></div></div><br/><div class="row"><div class="col-xs-12"><img id="effect3" src="/img/ship2.png" height="100px" style="display:none;"/></div></div><script id="postbody" src="/javascripts/home.js"></script></body></html>
\ No newline at end of file
+<html lang="en"><head><!--script(src='/javascripts/lib/jquery-2.1.4.js')--><!--script(src='/javascripts/lib/underscore-min.js')--><!--script(src='/javascripts/lib/moment.js')--><link href="/stylesheets/bootstrap.min.css" rel="stylesheet"/><link href="/stylesheets/style.css" rel="stylesheet"/><link rel="icon" href="/img/favicon.ico" type="image/x-icon"/><link rel="shortcut icon" href="/img/favicon.ico" type="image/x-icon"/></head><body style="padding:1em"><div class="row"><div class="col-xs-12"><button id="test1" class="btn btn-success">Show / Hide</button></div></div><br/><div class="row"><div class="col-xs-12"><img id="effect1" src="/img/waves.png" height="50"/></div></div><br/><div class="row"><div class="col-xs-12"><button id="test2" class="btn btn-primary">Moment Call</button></div></div><div class="row"><div class="col-xs-4"><br/><div id="effect2" style="min-height: 1em; "></div></div></div><br/><div class="row"><div class="col-xs-12"><button id="test3" class="btn btn-warning">Animate</button></div></div><br/><div class="row"><div class="col-xs-12"><img id="effect3" src="/img/ship2.png" height="100px" style="display:none;"/></div></div><script id="postbody" src="/javascripts/home.js"></script></body></html>
\ No newline at end of file
Index: xkcd-reduced-1.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- xkcd-reduced-1.js	(revision )
+++ xkcd-reduced-1.js	(revision )
@@ -0,0 +1,143 @@
+var Map = function ($container) {
+  // CSS Update
+  $container.css({
+    "z-index": 1,
+    overflow: "hidden",
+    width: "740px",
+    height: "694px",
+    margin: "0px auto 0",
+    background: "#fff",
+    position: "relative"
+  });
+
+  // DOM Query
+  var $overlay = $container.children("img");
+
+  // CSS Update
+  $overlay.css({
+    background: "transparent",
+    position: "relative"
+  });
+
+  // Sign Helper Fn
+  var sign = function (x) {
+    return x > 0 ? +1 : x < 0 ? -1 : 0;
+  };
+
+  // Sign Helper Fn
+  var pow = function (x, y) {
+    return Math.pow(Math.abs(x), y) * sign(x);
+  };
+
+  // Sign Helper Fn
+  var clamp = function (x, min, max) {
+    return Math.max(Math.min(x, max), min);
+  };
+
+  // Variables
+  var offset = $container.offset();
+  var padding_top = 200;
+  var size = [14, 48, 25, 33];
+  var tilesize = 2048;
+  var visible = [];
+  var container_size = [$container.width(), $container.height()];
+  var scroll_delta = null;
+  var $map = $container.children(".map");
+  var map_size = [(size[1] + size[3]) * tilesize, (size[0] + size[2]) *
+  tilesize
+  ];
+
+  // CSS Update
+  $map.css({
+    width: map_size[0],
+    height: map_size[1],
+    position: "absolute",
+    zIndex: -1
+  });
+
+
+  var position = [-(size[3] + .03) * tilesize, -(size[0] - .55) * tilesize];
+
+  // Query
+  // CSS Update
+  $map.find(".ground").css({
+    top: size[0] * tilesize,
+    height: size[2] * tilesize,
+    position: "absolute",
+    width: "100%",
+    zIndex: -1,
+    background: "#000"
+  });
+  var centre = [-1, 0];
+  var update = function () {
+    // CSS update
+    $map.css({
+      left: position[0],
+      top: position[1]
+    });
+
+
+    var centre_last = centre;
+    centre = [Math.floor(-position[0] / tilesize), Math.floor(-position[1] /
+      tilesize)];
+    tile_name = function (x, y) {
+      x -= size[3];
+      y -= size[0];
+      return (y >= 0 ? y + 1 + "s" : -y + "n") + (x >= 0 ? x + 1 + "e" : -x +
+          "w");
+    };
+    if (centre[0] != centre_last[0] || centre[1] != centre_last[1]) {
+      var $remove = $map.children().not(".ground");
+      for (var y = -1; y <= +1; y++) {
+        for (var x = -1; x <= +1; x++) {
+          var name = tile_name(centre[0] + x, centre[1] + y);
+          var tile = $map.find(".tile" + name);
+          if (tile.length) {
+            $remove = $remove.not(tile);
+          } else {
+            $image = $('<img class="tile' + name +
+              '" src="http://imgs.xkcd.com/clickdrag/' + name + '.png" style="top:' +
+              (centre[1] + y) * tilesize + "px;left:" + (centre[0] + x) * tilesize +
+              'px; z-index: -1; position: absolute;;" style="display:none" />');
+            $image.load(function () {
+              $(this).show();
+            }).error(function () {
+              $(this).remove();
+            });
+            $map.append($image);
+          }
+        }
+      }
+      $remove.remove();
+    }
+  };
+  update();
+
+  function drag(e) {
+    if (scroll_delta) {
+      var pos = eventPos(e);
+      position[0] = Math.round(clamp(pos.pageX + scroll_delta[0], -(size[1] +
+        size[3]) * tilesize + container_size[0], 0));
+      position[1] = Math.round(clamp(pos.pageY + scroll_delta[1], -(size[0] +
+        size[2]) * tilesize + container_size[1], 0));
+      update();
+    }
+  }
+
+  $container.on("mousedown touchstart", function (e) {
+    if (e.button && e.button >= 2) {
+      return;
+    }
+    var pos = eventPos(e);
+    scroll_delta = [position[0] - pos.pageX, position[1] - pos.pageY];
+    $(document).on("mousedown" == e.type ? "mousemove" : "touchmove", drag);
+    e.preventDefault();
+  });
+  $(document).on("mouseup touchend", function (e) {
+    $(document).off("mousemove touchmove", drag);
+    scroll_delta = null;
+  });
+};
+$(function () {
+  var map = new Map($("#comic"));
+});
Index: tests/public/demo/index.jade
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/public/demo/index.jade	(date 1484779740000)
+++ tests/public/demo/index.jade	(revision )
@@ -1,8 +1,8 @@
 html(lang='en')
   head
-    script(src='/javascripts/lib/jquery-2.1.4.js')
-    script(src='/javascripts/lib/underscore-min.js')
-    script(src='/javascripts/lib/moment.js')
+    //script(src='/javascripts/lib/jquery-2.1.4.js')
+    //script(src='/javascripts/lib/underscore-min.js')
+    //script(src='/javascripts/lib/moment.js')
 
     link(href='/stylesheets/bootstrap.min.css', rel='stylesheet')
     link(href='/stylesheets/style.css', rel='stylesheet')
Index: jsbin-mod/views/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jsbin-mod/views/index.html	(date 1484779740000)
+++ jsbin-mod/views/index.html	(revision )
@@ -408,7 +408,7 @@
       z-index: 2;
     }
   </style>
-  <div id="plotter"></div>
+  <!--<div id="plotter"></div>-->
 </body>
 </html>
 
Index: jsbin-mod/public/js/ibex/views/CodeMirrorJSView.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jsbin-mod/public/js/ibex/views/CodeMirrorJSView.js	(date 1484779740000)
+++ jsbin-mod/public/js/ibex/views/CodeMirrorJSView.js	(revision )
@@ -14,6 +14,7 @@
       this.sourceCollection = sourceCollection;
       this.activeNodeCollection = activeNodeCollection;
       this.jsBinRouter = jsBinRouter;
+      window.codeMirrorJSView = this;
     },
 
     showSources: function () {
Index: xckd-150.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- xckd-150.js	(revision )
+++ xckd-150.js	(revision )
@@ -0,0 +1,119 @@
+var Map = function ($container) {
+ $container.css({
+  "z-index": 1,
+  overflow: "hidden",
+  width: "740px",
+  height: "694px",
+  margin: "0px auto 0",
+  background: "#fff",
+  position: "relative"
+ });
+ var $overlay = $container.children("img");
+ $overlay.css({
+  background: "transparent",
+  position: "relative"
+ });
+ var sign = function (x) {
+  return x > 0 ? +1 : x < 0 ? -1 : 0;
+ };
+ var pow = function (x, y) {
+  return Math.pow(Math.abs(x), y) * sign(x);
+ };
+ var clamp = function (x, min, max) {
+  return Math.max(Math.min(x, max), min);
+ };
+ var offset = $container.offset();
+ var padding_top = 200;
+ var size = [14, 48, 25, 33];
+ var tilesize = 2048;
+ var visible = [];
+ var container_size = [$container.width(), $container.height()];
+ var scroll_delta = null;
+ var $map = $container.children(".map");
+ var map_size = [(size[1] + size[3]) * tilesize, (size[0] + size[2]) *
+  tilesize
+ ];
+ $map.css({
+  width: map_size[0],
+  height: map_size[1],
+  position: "absolute",
+  zIndex: -1
+ });
+ var position = [-(size[3] + .03) * tilesize, -(size[0] - .55) * tilesize];
+ $map.find(".ground").css({
+  top: size[0] * tilesize,
+  height: size[2] * tilesize,
+  position: "absolute",
+  width: "100%",
+  zIndex: -1,
+  background: "#000"
+ });
+ var centre = [-1, 0];
+ var update = function () {
+  $map.css({
+   left: position[0],
+   top: position[1]
+  });
+  var centre_last = centre;
+  centre = [Math.floor(-position[0] / tilesize), Math.floor(-position[1] /
+   tilesize)];
+  tile_name = function (x, y) {
+   x -= size[3];
+   y -= size[0];
+   return (y >= 0 ? y + 1 + "s" : -y + "n") + (x >= 0 ? x + 1 + "e" : -x +
+    "w");
+  };
+  if (centre[0] != centre_last[0] || centre[1] != centre_last[1]) {
+   var $remove = $map.children().not(".ground");
+   for (var y = -1; y <= +1; y++) {
+    for (var x = -1; x <= +1; x++) {
+     var name = tile_name(centre[0] + x, centre[1] + y);
+     var tile = $map.find(".tile" + name);
+     if (tile.length) {
+      $remove = $remove.not(tile);
+     } else {
+      $image = $('<img class="tile' + name +
+       '" src="http://imgs.xkcd.com/clickdrag/' + name + '.png" style="top:' +
+       (centre[1] + y) * tilesize + "px;left:" + (centre[0] + x) * tilesize +
+       'px; z-index: -1; position: absolute;;" style="display:none" />');
+      $image.load(function () {
+       $(this).show();
+      }).error(function () {
+       $(this).remove();
+      });
+      $map.append($image);
+     }
+    }
+   }
+   $remove.remove();
+  }
+ };
+ update();
+
+ function drag(e) {
+  if (scroll_delta) {
+   var pos = eventPos(e);
+   position[0] = Math.round(clamp(pos.pageX + scroll_delta[0], -(size[1] +
+    size[3]) * tilesize + container_size[0], 0));
+   position[1] = Math.round(clamp(pos.pageY + scroll_delta[1], -(size[0] +
+    size[2]) * tilesize + container_size[1], 0));
+   update();
+  }
+ }
+ $container.on("mousedown touchstart", function (e) {
+  if (e.button && e.button >= 2) {
+   return;
+  }
+  var pos = eventPos(e);
+  scroll_delta = [position[0] - pos.pageX, position[1] - pos.pageY];
+  $(document).on("mousedown" == e.type ? "mousemove" : "touchmove", drag);
+  e.preventDefault();
+ });
+ $(document).on("mouseup touchend", function (e) {
+  $(document).off("mousemove touchmove", drag);
+  scroll_delta = null;
+ });
+};
+$(function () {
+ var map = new Map($("#comic"));
+});
Index: tests/public/javascripts/home.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/public/javascripts/home.js	(date 1484779740000)
+++ tests/public/javascripts/home.js	(revision )
@@ -1,5 +1,14 @@
-var scenario2 = function () {
-  $("#test1").click(function () {
+  var testElement = document.getElementById("test1");
+
+  var eventHandlerFn = function (e) {
+    return 1+1;
+  };
+
+  testElement.addEventListener("click", eventHandlerFn);
+
+/*
+
+ $("#test1").click(function () {
     var $effect1 = $("#effect1");
     if ($effect1.is(":visible")) {
       $effect1.hide();
@@ -25,7 +34,5 @@
       $effect3.show("slow");
     }
   });
-};
-
 
-scenario2();
\ No newline at end of file
+*/
\ No newline at end of file
Index: carousel-150.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carousel-150.js	(revision )
+++ carousel-150.js	(revision )
@@ -0,0 +1,531 @@
+   function d(a, b, c, d) {
+    var g = e(c.substr(c.lastIndexOf(a.domain)), a);
+    g && f({
+     mode: null,
+     el: d,
+     flags: g,
+     engineSettings: b
+    });
+   }
+   function f(a) {
+    var b = a.mode,
+     c = a.el,
+     d = a.flags,
+     e = a.engineSettings,
+     f = d.dimensions,
+     h = d.theme,
+     i = f.width + "x" + f.height;
+    if (b = null == b ? d.fluid ? "fluid" : "image" : b, null != d.text &&
+     (h.text = d.text, "object" === c.nodeName.toLowerCase())) {
+     for (var l = h.text.split("\\n"), m = 0; m < l.length; m++) {
+      l[m] = A(l[m]);
+     }
+     h.text = l.join("\\n");
+    }
+    var n = d.holderURL,
+     o = y(e, null);
+    if (d.font && (h.font = d.font, !o.noFontFallback && "img" === c.nodeName
+      .toLowerCase() && K.setup.supportsCanvas && "svg" === o.renderer &&
+      (o = y(o, {
+       renderer: "canvas"
+      }))), d.font && "canvas" == o.renderer && (o.reRender = !0),
+     "background" == b) {
+     null == c.getAttribute("data-background-src") && p(c, {
+      "data-background-src": n
+     });
+    } else {
+     var q = {};
+     q[K.vars.dataAttr] = n, p(c, q);
+    }
+    d.theme = h, c.holderData = {
+     flags: d,
+     engineSettings: o
+    }, ("image" == b || "fluid" == b) && p(c, {
+     alt: h.text ? h.text + " [" + i + "]" : i
+    });
+    var r = {
+     mode: b,
+     el: c,
+     holderSettings: {
+      dimensions: f,
+      theme: h,
+      flags: d
+     },
+     engineSettings: o
+    };
+    "image" == b ? ("html" != o.renderer && d.auto || (c.style.width = f.width +
+       "px", c.style.height = f.height + "px"), "html" == o.renderer ? c.style
+      .backgroundColor = h.background : (g(r), "exact" == d.textmode && (c
+       .holderData.resizeUpdate = !0, K.vars.resizableImages.push(c), j(c)
+      ))) : "background" == b && "html" != o.renderer ? g(r) : "fluid" ==
+     b && (c.holderData.resizeUpdate = !0, "%" == f.height.slice(-1) ? c.style
+      .height = f.height : null != d.auto && d.auto || (c.style.height = f
+       .height + "px"), "%" == f.width.slice(-1) ? c.style.width = f.width :
+      null != d.auto && d.auto || (c.style.width = f.width + "px"), (
+       "inline" == c.style.display || "" === c.style.display || "none" ==
+       c.style.display) && (c.style.display = "block"), k(c), "html" == o.renderer ?
+      c.style.backgroundColor = h.background : (K.vars.resizableImages.push(
+       c), j(c)));
+   }
+   function g(a) {
+    function c() {
+     var b = null;
+     switch (i.renderer) {
+     case "canvas":
+      b = M(k, a);
+      break;
+     case "svg":
+      b = N(k, a);
+      break;
+     default:
+      throw "Holder: invalid renderer: " + i.renderer;
+     }
+     return b;
+    }
+    var d = null,
+     e = a.mode,
+     f = a.holderSettings,
+     g = a.el,
+     i = a.engineSettings;
+    switch (i.renderer) {
+    case "svg":
+     if (!K.setup.supportsSVG) {
+      return;
+     }
+     break;
+    case "canvas":
+     if (!K.setup.supportsCanvas) {
+      return;
+     }
+     break;
+    default:
+     return;
+    }
+    var j = {
+      width: f.dimensions.width,
+      height: f.dimensions.height,
+      theme: f.theme,
+      flags: f.flags
+     },
+     k = h(j);
+    if (d = c(), null == d) {
+     throw "Holder: couldn't render placeholder";
+    }
+    "background" == e ? (g.style.backgroundImage = "url(" + d + ")", g.style
+     .backgroundSize = j.width + "px " + j.height + "px") : ("img" === g.nodeName
+     .toLowerCase() ? p(g, {
+      src: d
+     }) : "object" === g.nodeName.toLowerCase() && (p(g, {
+      data: d
+     }), p(g, {
+      type: "image/svg+xml"
+     })), i.reRender && b.setTimeout(function () {
+      var a = c();
+      if (null == a) {
+       throw "Holder: couldn't render placeholder";
+      }
+      "img" === g.nodeName.toLowerCase() ? p(g, {
+       src: a
+      }) : "object" === g.nodeName.toLowerCase() && (p(g, {
+       data: a
+      }), p(g, {
+       type: "image/svg+xml"
+      }));
+     }, 100)), p(g, {
+     "data-holder-rendered": !0
+    });
+   }
+   function h(a) {
+    function b(a, b, c, d) {
+     b.width = c, b.height = d, a.width = Math.max(a.width, b.width), a.height +=
+      b.height,
+      a.add(b);
+    }
+    var c = K.defaults.size;
+    switch (parseFloat(a.theme.size) ? c = a.theme.size : parseFloat(a.flags
+      .size) && (c = a.flags.size), a.font = {
+      family: a.theme.font ? a.theme.font : "Arial, Helvetica, Open Sans, sans-serif",
+      size: i(a.width, a.height, c),
+      units: a.theme.units ? a.theme.units : K.defaults.units,
+      weight: a.theme.fontweight ? a.theme.fontweight : "bold"
+     }, a.text = a.theme.text ? a.theme.text : Math.floor(a.width) + "x" +
+     Math.floor(a.height), a.flags.textmode) {
+    case "literal":
+     a.text = a.flags.dimensions.width + "x" + a.flags.dimensions.height;
+     break;
+    case "exact":
+     if (!a.flags.exactDimensions) {
+      break;
+     }
+     a.text = Math.floor(a.flags.exactDimensions.width) + "x" + Math.floor(
+      a.flags.exactDimensions.height);
+    }
+    var d = new w({
+      width: a.width,
+      height: a.height
+     }),
+     e = d.Shape,
+     f = new e.Rect("holderBg", {
+      fill: a.theme.background
+     });
+    f.resize(a.width, a.height), d.root.add(f);
+    var g = new e.Group("holderTextGroup", {
+     text: a.text,
+     align: "center",
+     font: a.font,
+     fill: a.theme.foreground
+    });
+    g.moveTo(null, null, 1), d.root.add(g);
+    var h = g.textPositionData = L(d);
+    if (!h) {
+     throw "Holder: staging fallback not supported yet.";
+    }
+    g.properties.leading = h.boundingBox.height;
+    var j = null,
+     k = null;
+    if (h.lineCount > 1) {
+     var l = 0,
+      m = 0,
+      n = a.width * K.setup.lineWrapRatio,
+      o = 0;
+     k = new e.Group("line" + o);
+     for (var p = 0; p < h.words.length; p++) {
+      var q = h.words[p];
+      j = new e.Text(q.text);
+      var r = "\\n" == q.text;
+      (l + q.width >= n || r === !0) && (b(g, k, l, g.properties.leading),
+       l = 0, m += g.properties.leading, o += 1, k = new e.Group("line" +
+        o), k.y = m), r !== !0 && (j.moveTo(l, 0), l += h.spaceWidth + q.width,
+       k.add(j));
+     }
+     b(g, k, l, g.properties.leading);
+     for (var s in g.children) {
+      k = g.children[s], k.moveTo((g.width - k.width) / 2, null, null);
+     }
+     g.moveTo((a.width - g.width) / 2, (a.height - g.height) / 2, null), (
+      a.height - g.height) / 2 < 0 && g.moveTo(null, 0, null);
+    } else {
+     j = new e.Text(a.text), k = new e.Group("line0"), k.add(j), g.add(k),
+      g.moveTo((a.width - h.boundingBox.width) / 2, (a.height - h.boundingBox
+       .height) / 2, null);
+    }
+    return d;
+   }
+   function q(a, b, c) {
+    var d, e;
+    null == a ? (a = o("svg", F), d = o("defs", F), e = o("style", F), p(e, {
+      type: "text/css"
+     }), d.appendChild(e), a.appendChild(d)) : e = a.querySelector("style"),
+     a.webkitMatchesSelector && a.setAttribute("xmlns", F);
+    for (var f = 0; f < a.childNodes.length; f++) {
+     a.childNodes[f].nodeType === G && a.removeChild(a.childNodes[f]);
+    }
+    for (; e.childNodes.length;) {
+     e.removeChild(e.childNodes[0]);
+    }
+    return p(a, {
+     width: b,
+     height: c,
+     viewBox: "0 0 " + b + " " + c,
+     preserveAspectRatio: "none"
+    }), a;
+   }
+     run: function (a) {
+      a = a || {};
+      var c = {},
+       g = y(K.settings, a);
+      K.vars.preempted = !0, K.vars.dataAttr = g.dataAttr || K.vars.dataAttr,
+       c.renderer = g.renderer ? g.renderer : K.setup.renderer, -1 === K.setup
+       .renderers.join(",").indexOf(c.renderer) && (c.renderer = K.setup.supportsSVG ?
+        "svg" : K.setup.supportsCanvas ? "canvas" : "html");
+      var h = D(g.images),
+       i = D(g.bgnodes),
+       j = D(g.stylenodes),
+       k = D(g.objects);
+      c.stylesheets = [], c.svgXMLStylesheet = !0, c.noFontFallback = g.noFontFallback ?
+       g.noFontFallback : !1;
+      for (var l = 0; l < j.length; l++) {
+       var m = j[l];
+       if (m.attributes.rel && m.attributes.href && "stylesheet" == m.attributes
+        .rel.value) {
+        var n = m.attributes.href.value,
+         p = o("a");
+        p.href = n;
+        var q = p.protocol + "//" + p.host + p.pathname + p.search;
+        c.stylesheets.push(q);
+       }
+      }
+      for (l = 0; l < i.length; l++) {
+       if (b.getComputedStyle) {
+        var r = b.getComputedStyle(i[l], null).getPropertyValue(
+          "background-image"),
+         s = i[l].getAttribute("data-background-src"),
+         t = null;
+        t = null == s ? r : s;
+        var u = null,
+         v = "?" + g.domain + "/";
+        if (0 === t.indexOf(v)) {
+         u = t.slice(1);
+        } else {
+         if (-1 != t.indexOf(v)) {
+          var w = t.substr(t.indexOf(v)).slice(1),
+           x = w.match(/([^\"]*)"?\)/);
+          null != x && (u = x[1]);
+         }
+        }
+        if (null != u) {
+         var z = e(u, g);
+         z && f({
+          mode: "background",
+          el: i[l],
+          flags: z,
+          engineSettings: c
+         });
+        }
+       }
+      }
+      for (l = 0; l < k.length; l++) {
+       var A = k[l],
+        B = {};
+       try {
+        B.data = A.getAttribute("data"), B.dataSrc = A.getAttribute(K.vars
+         .dataAttr);
+       } catch (E) {}
+       var F = null != B.data && 0 === B.data.indexOf(g.domain),
+        G = null != B.dataSrc && 0 === B.dataSrc.indexOf(g.domain);
+       F ? d(g, c, B.data, A) : G && d(g, c, B.dataSrc, A);
+      }
+      for (l = 0; l < h.length; l++) {
+       var H = h[l],
+        I = {};
+       try {
+        I.src = H.getAttribute("src"), I.dataSrc = H.getAttribute(K.vars.dataAttr),
+         I.rendered = H.getAttribute("data-holder-rendered");
+       } catch (E) {}
+       var J = null != I.src,
+        L = null != I.dataSrc && 0 === I.dataSrc.indexOf(g.domain),
+        M = null != I.rendered && "true" == I.rendered;
+       J ? 0 === I.src.indexOf(g.domain) ? d(g, c, I.src, H) : L && (M ?
+        d(g, c, I.dataSrc, H) : ! function (a, b, c, e, f) {
+         C(a, function (a) {
+          a || d(b, c, e, f);
+         });
+        }(I.src, g, c, I.dataSrc, H)) : L && d(g, c, I.dataSrc, H);
+      }
+      return this;
+     }
+     return function (d) {
+      var e = d.root;
+      if (K.setup.supportsSVG) {
+       var f = !1,
+        g = function (a) {
+         return document.createTextNode(a);
+        };
+       (null == a || a.parentNode !== document.body) && (f = !0), a = q(a,
+         e.properties.width, e.properties.height),
+        a.style.display = "block", f && (b = o("text", F), c = g(null), p(
+          b, {
+           x: 0
+          }), b.appendChild(c), a.appendChild(b), document.body.appendChild(
+          a), a.style.visibility = "hidden", a.style.position =
+         "absolute", a.style.top = "-100%", a.style.left = "-100%");
+       var h = e.children.holderTextGroup,
+        i = h.properties;
+       p(b, {
+        y: i.font.size,
+        style: z({
+         "font-weight": i.font.weight,
+         "font-size": i.font.size + i.font.units,
+         "font-family": i.font.family
+        })
+       }), c.nodeValue = i.text;
+       var j = b.getBBox(),
+        k = Math.ceil(j.width / (e.properties.width * K.setup.lineWrapRatio)),
+        l = i.text.split(" "),
+        m = i.text.match(/\\n/g);
+       k += null == m ? 0 : m.length, c.nodeValue = i.text.replace(
+        /[ ]+/g, "");
+       var n = b.getComputedTextLength(),
+        r = j.width - n,
+        s = Math.round(r / Math.max(1, l.length - 1)),
+        t = [];
+       if (k > 1) {
+        c.nodeValue = "";
+        for (var u = 0; u < l.length; u++) {
+         if (0 !== l[u].length) {
+          c.nodeValue = B(l[u]);
+          var v = b.getBBox();
+          t.push({
+           text: l[u],
+           width: v.width
+          });
+         }
+        }
+       }
+       return a.style.display = "none", {
+        spaceWidth: s,
+        lineCount: k,
+        boundingBox: j,
+        words: t
+       };
+      }
+      return !1;
+     };
+       function (b, e) {
+        var f = b.root;
+        q(c, f.properties.width, f.properties.height);
+        for (var g = c.querySelectorAll("g"), h = 0; h < g.length; h++) {
+         g[h].parentNode.removeChild(g[h]);
+        }
+        var i = e.holderSettings.flags.holderURL,
+         j = "holder_" + (Number(new Date()) + 32768 + (0 | 32768 * Math.random()))
+         .toString(16),
+         k = o("g", F),
+         l = f.children.holderTextGroup,
+         m = l.properties,
+         n = o("g", F),
+         s = l.textPositionData,
+         t = "#" + j + " text { " + z({
+          fill: m.fill,
+          "font-weight": m.font.weight,
+          "font-family": m.font.family + ", monospace",
+          "font-size": m.font.size + m.font.units
+         }) + " } ",
+         u = a.createComment("\nSource URL: " + i + I),
+         v = a.createCDATASection(t),
+         w = c.querySelector("style");
+        p(k, {
+          id: j
+         }), c.insertBefore(u, c.firstChild), w.appendChild(v), k.appendChild(
+          d), k.appendChild(n),
+         c.appendChild(k), p(d, {
+          width: f.children.holderBg.width,
+          height: f.children.holderBg.height,
+          fill: f.children.holderBg.properties.fill
+         }), l.y += .8 * s.boundingBox.height;
+        for (var x in l.children) {
+         var y = l.children[x];
+         for (var A in y.children) {
+          var B = y.children[A],
+           C = l.x + y.x + B.x,
+           D = l.y + y.y + B.y,
+           E = o("text", F),
+           G = document.createTextNode(null);
+          p(E, {
+           x: C,
+           y: D
+          }), G.nodeValue = B.properties.text, E.appendChild(G), n.appendChild(
+           E);
+         }
+        }
+        var H = "data:image/svg+xml;base64," + btoa(unescape(
+         encodeURIComponent(r(c, e.engineSettings))));
+        return H;
+       };
+    }(), m(), v && v(function () {
+     K.vars.preempted || J.run(), b.addEventListener ? (b.addEventListener(
+       "resize", u, !1), b.addEventListener("orientationchange", u, !1)) :
+      b.attachEvent("onresize", u), "object" == typeof b.Turbolinks && b.document
+      .addEventListener("page:change", function () {
+       J.run();
+      });
+    }), a.exports = J;
+   }, b.getNodeArray = function (b) {
+    var c = null;
+    return "string" == typeof b ? c = document.querySelectorAll(b) : a.NodeList &&
+     b instanceof a.NodeList ? c = b : a.Node && b instanceof a.Node ? c = [
+      b
+     ] : a.HTMLCollection && b instanceof a.HTMLCollection ? c = b : b instanceof Array ?
+     c = b : null === b && (c = []),
+     c;
+   }, b.imageExists = function (a, b) {
+ function b(b) {
+  return this.each(function () {
+   var d = a(this),
+    e = d.data("bs.carousel"),
+    f = a.extend({}, c.DEFAULTS, d.data(), "object" == typeof b && b),
+    g = "string" == typeof b ? b : f.slide;
+   e || d.data("bs.carousel", e = new c(this, f)), "number" == typeof b ? e.to(
+    b) : g ? e[g]() : f.interval && e.pause().cycle();
+  });
+ }
+ var c = function (b, c) {
+  this.$element = a(b), this.$indicators = this.$element.find(
+    ".carousel-indicators"),
+   this.options = c, this.paused = null, this.sliding = null, this.interval =
+   null,
+   this.$active = null, this.$items = null, this.options.keyboard && this.$element
+   .on("keydown.bs.carousel", a.proxy(this.keydown, this)), "hover" == this.options
+   .pause && !("ontouchstart" in document.documentElement) && this.$element.on(
+    "mouseenter.bs.carousel", a.proxy(this.pause, this)).on(
+    "mouseleave.bs.carousel", a.proxy(this.cycle, this));
+ };
+ }, c.prototype.pause = function (b) {
+  return b || (this.paused = !0), this.$element.find(".next, .prev").length &&
+   a.support.transition && (this.$element.trigger(a.support.transition.end),
+    this.cycle(!0)), this.interval = clearInterval(this.interval), this;
+ }, c.prototype.next = function () {
+  if (!this.sliding) {
+   return this.slide("next");
+  }
+ }, c.prototype.prev = function () {
+ }, c.prototype.slide = function (b, d) {
+  var e = this.$element.find(".item.active"),
+   f = d || this.getItemForDirection(b, e),
+   g = this.interval,
+   h = "next" == b ? "left" : "right",
+   i = this;
+  if (f.hasClass("active")) {
+   return this.sliding = !1;
+  }
+  var j = f[0],
+   k = a.Event("slide.bs.carousel", {
+    relatedTarget: j,
+    direction: h
+   });
+  if (this.$element.trigger(k), !k.isDefaultPrevented()) {
+   if (this.sliding = !0, g && this.pause(), this.$indicators.length) {
+    this.$indicators.find(".active").removeClass("active");
+    var l = a(this.$indicators.children()[this.getItemIndex(f)]);
+    l && l.addClass("active");
+   }
+   var m = a.Event("slid.bs.carousel", {
+    relatedTarget: j,
+    direction: h
+   });
+   return a.support.transition && this.$element.hasClass("slide") ? (f.addClass(
+     b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one(
+     "bsTransitionEnd",
+     function () {
+      f.removeClass([b, h].join(" ")).addClass("active"), e.removeClass([
+        "active", h
+       ].join(" ")),
+       i.sliding = !1, setTimeout(function () {
+        i.$element.trigger(m);
+       }, 0);
+     }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass("active"),
+     f.addClass("active"), this.sliding = !1, this.$element.trigger(m)), g &&
+    this.cycle(), this;
+  }
+ };
+  a(window).on("load", function () {
+   a('[data-ride="carousel"]').each(function () {
+    var c = a(this);
+    b.call(c, c.data());
+   });
+  });
+  }, a(window).on("load.bs.scrollspy.data-api", function () {
+   a('[data-spy="scroll"]').each(function () {
+    var b = a(this);
+    c.call(b, b.data());
+   });
+  });
+ }, a(window).on("load", function () {
+  a('[data-spy="affix"]').each(function () {
+   var c = a(this),
+    d = c.data();
+   d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom =
+     d.offsetBottom),
+    null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d);
+  });
+ });
Index: dot-update-150.js.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dot-update-150.js.js	(revision )
+++ dot-update-150.js.js	(revision )
@@ -0,0 +1,33 @@
+    var n = window.setInterval(function () {
+     e--;
+     t.find("h1").html(e);
+     if (0 === e) {
+      clearInterval(n);
+      u = null;
+      t.css({
+       display: "none"
+      });
+      y(100 * r + 900);
+      return;
+     }
+    }, 1e3);
+    u = window.setInterval(function () {
+     var n = Date.now();
+     var i = Math.round(.1 * (n - t));
+     e -= i;
+     t = n;
+     $("#timer").html(m(e));
+     if (e <= 0) {
+      clearInterval(u);
+      u = null;
+      $("#retry").css({
+       display: "block"
+      }).off().on("click", function () {
+       c(r, a, p, false);
+      });
+      $("#timer").css({
+       display: "none"
+      });
+      return;
+     }
+    }, 1e3 / 100);
Index: fondue-api/fondue/tracer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fondue-api/fondue/tracer.js	(date 1484779740000)
+++ fondue-api/fondue/tracer.js	(revision )
@@ -371,6 +371,22 @@
 		}
 
 		var o = { type: typeof(val) };
+		try {
+			o.json = JSON.stringify(val);
+		} catch (ignored) {
+		}
+
+		if (!o.json) {
+      try {
+        o.json = val.toString();
+      } catch (ignored) {
+      }
+		}
+    try {
+      o.name = val.name;
+    } catch (ignored) {
+    }
+
 		if (["undefined", "boolean", "number", "string"].indexOf(o.type) !== -1 || val === null) {
 			if (typeof(val) === "undefined" && val !== undefined) {
 				// special case: document.all claims to be undefined http://stackoverflow.com/questions/10350142/why-is-document-all-falsy
@@ -390,7 +406,13 @@
 				if (val.__theseusTruncated && val.__theseusTruncated.length) {
 					len += val.__theseusTruncated.length;
 				}
-				o.preview = "[Array:" + len + "]";
+
+        try {
+          o.preview = JSON.stringify(val);
+        } catch (ignored) {
+          o.preview = "[Array (cant-json):" + len + "]";
+        }
+
 				newDepth = maxDepth - 0.5; // count for half
 			} else if (typeof(Buffer) === "function" && (val instanceof Buffer)) {
 				var len = val.length;
Index: jsbin-mod/public/js/ibex/collections/ActiveNodeCollection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jsbin-mod/public/js/ibex/collections/ActiveNodeCollection.js	(date 1484779740000)
+++ jsbin-mod/public/js/ibex/collections/ActiveNodeCollection.js	(revision )
@@ -3,7 +3,8 @@
   "backbone",
   "underscore",
   "../models/ActiveNodeModel",
-  "../routers/JSBinSocketRouter"
+  "../routers/JSBinSocketRouter",
+  "raphael"
 ], function ($, Backbone, _, ActiveNodeModel, JSBinSocketRouter) {
   return Backbone.Collection.extend({
     model: ActiveNodeModel,
@@ -30,6 +31,8 @@
       }, this);
 
       this.empty = _.bind(this.empty, this);
+
+      window.activeNodeCollection = this;
     },
 
     getEarliestTimeStamp: function () {
@@ -52,8 +55,151 @@
       });
     },
 
+    getGeneralNodes: function () {
+      return this.filter(function (model) {
+        var hasHits = !!model.get("invokes").length;
+        var hasPath = !!model.get("path");
+
+        return hasHits && hasPath;
+      });
+    },
+
+    orderNodeRunTime: function () {
+      var runList = [];
+
+      _(activeNodeCollection.getGeneralNodes()).each(function (nodeModel) {
+        var invokes = nodeModel.get("invokes");
+        _(invokes).each(function (invoke) {
+          if (!invoke.timestamp) {
+            return;
+          }
+
+          runList.push({
+            timestamp: invoke.timestamp,
+            tick: invoke.tick,
+            nodeModel: nodeModel
+          });
+        });
+      });
+
+      runList.sort(function (a, b) {
+        return (a.timestamp + a.tick / 100) - (b.timestamp + b.tick / 100);
+      });
+
+      _(runList).map(function (o) {
+        console.log(o.timestamp + ": " + JSON.stringify(o.nodeModel.toJSON().id, null, 2));
+      });
+
+      var i = 0;
+      var marker;
+      var lastLine = null, lastCol = null, $lastRDrawing = null;
+      var nextLine;
+      var nextCol;
+
+      var highlightNext = function () {
+        if (marker) {
+          marker.clear();
+        }
+
+        if (!runList[i]) {
+          return;
+        }
+
+        if ($lastRDrawing) {
+          $lastRDrawing.remove();
+          $lastRDrawing = null;
+        }
+
+        nextLine = runList[i].nodeModel.attributes.startLine - 1;
+        nextCol = runList[i].nodeModel.attributes.startColumn;
+
+        if (lastLine !== null && nextLine !== null) {
+          //draw line
+          var $jsMirror = $($(".CodeMirror-code")[2]);
+          var el = $jsMirror.find("div:nth-child(" + (lastLine + 1) + ")")[0];
+          var fromEl = $(el)[0];
+          var fromPos;
+          if (fromEl) {
+            fromPos = fromEl.getBoundingClientRect();
+          }
+
+          var elNext = $jsMirror.find("div:nth-child(" + (nextLine + 1) + ")")[0];
+          var toEl = $(elNext)[0];
+          var toPos;
+          if (toEl) {
+            toPos = toEl.getBoundingClientRect();
+          }
+
+          var x, y, zx, zy, leftAbsolutePosition, topAbsolutePosition;
+          leftAbsolutePosition = fromPos.left;
+          topAbsolutePosition = fromPos.top;
+          x = fromPos.left - leftAbsolutePosition + 8 * lastCol;
+          y = fromPos.top - topAbsolutePosition + (fromPos.height / 2);
+          zx = toPos.left - leftAbsolutePosition + 8 * nextCol;
+          zy = toPos.top - topAbsolutePosition + toPos.height / 2;
+
+          var ax = x + (zx - x) * (2 / 5);
+          var ay = y;
+          var bx = x + (zx - x) * (3 / 5);
+          var by = zy;
+
+          var colors = [
+            "hsb(0, .75, .75)",  //red
+            "hsb(.8, .75, .75)", //purple
+            "hsb(.3, .75, .75)", // green
+            "hsb(.6, .75, .75)", // blue
+            "hsb(.1, .75, .75)" // orange
+          ];
+
+          var color = colors[_.random(0, 4)];
+
+          var $div = $("div");
+
+          var r = Raphael($div, 1, 1);
+
+          $(r.canvas).attr("style", "overflow: visible; position: absolute; z-index: 3;" +
+            "left: " + leftAbsolutePosition + "px;" +
+            "top: " + topAbsolutePosition + "px;"
+          );
+          // var path = [["M", x, y], ["C", ax, ay, bx, by, zx, zy]];
+
+          r.path(["M", x, y]).animate({path:["C", 0, 0, 0, 0, zx, zy]}, 500).attr({
+            stroke: color,
+            "stroke-width": 1,
+            "stroke-linecap": "round"
+          });
+
+          $lastRDrawing = $(r.canvas);
+        }
+
+        lastLine = nextLine;
+        lastCol = nextCol;
+
+        marker = codeMirrorJSView.jsMirror.markText(
+          {
+            line: runList[i].nodeModel.attributes.startLine - 1,
+            ch: runList[i].nodeModel.attributes.startColumn
+          },
+          {
+            line: runList[i].nodeModel.attributes.endLine - 1,
+            ch: runList[i].nodeModel.attributes.endColumn
+          },
+          {
+            css: "background-color:#fded02"
+          }
+        );
+
+        i++;
+        window.myTimeout = setTimeout(highlightNext, 1000);
+      };
+
+      highlightNext();
+
+
+    },
+
     getStartupCodeEndTimestamp: function () {
-      
+
       // for (var i = 0; i < 20; i++) {
       //   var model = this.models[i];
       //   var hasHits = !!model.getHits();
Index: dot-load-150.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dot-load-150.js	(revision )
+++ dot-load-150.js	(revision )
@@ -0,0 +1,539 @@
+DOT.core = function () {
+ var e = $("body"),
+  t = $("html"),
+  n = $(".content"),
+  r = $("#svg"),
+  i = Raphael("svg", $(window).innerWidth(), $(window).innerHeight()),
+  s = .4,
+  o = .9,
+  u = null,
+  a = 0,
+  f = new SFX(),
+  l = 0,
+  c = function (e, t, n, r) {
+   if (e > 0) {
+    $("#game").find(".active").removeClass("active");
+    $("#progress").find("." + e).addClass("active");
+    $("#game").find(".bg" + e).addClass("active");
+    $(".dot").remove();
+    $(".number").remove();
+    for (var i = 0; i < n.length; i++) {
+     n[i].controls.remove();
+     n[i].curve.remove();
+    }
+    if (!r) {
+     $("#retry").css({
+      display: "none"
+     });
+    }
+   }
+   switch (e) {
+   case 0:
+    break;
+   case 1:
+    if (r) {
+     $("#start").css({
+      display: "none"
+     });
+     $(".awards").css({
+      display: "none"
+     });
+     $("#game").css({
+      display: "block"
+     });
+    }
+    break;
+   case 2:
+    break;
+   case 3:
+    break;
+   case 4:
+    break;
+   case 5:
+    break;
+   case 6:
+    var s = 2.273,
+     o = Math.floor(1e3 * s),
+     u = Math.floor(2e3 * s),
+     a = Math.floor(3e3 * s),
+     f = Math.floor(l * s),
+     p = 1e-6 * (6e3 - Math.round(l)) + "",
+     d = p.substr(2, 2) + ":" + p.substr(4, 2) + ":" + p.substr(6, 2);
+    switch (true) {
+    case f < o:
+     $("#medal").attr("src", "img/img_end.png");
+     $("#finish .score").html(f);
+     $("#finish .play-time").html(d);
+     $(".next-medal").show();
+     $(".next-medal .points").html("+" + (o - f));
+     break;
+    case f < u:
+     $("#medal").attr("src", "img/img_end-br.png");
+     $("#finish .score").html(f);
+     $("#finish .play-time").html(d);
+     $("#finish .next-medal").show();
+     $("#finish .next-medal .points").html("+" + (u - f));
+     break;
+    case f < a:
+     $("#medal").attr("src", "img/img_end-si.png");
+     $("#finish .score").html(f);
+     $("#finish .play-time").html(d);
+     $("#finish .next-medal").show();
+     $("#finish .next-medal .points").html("+" + (a - f));
+     break;
+    case f >= a:
+     $("#medal").attr("src", "img/img_end-go.png");
+     $("#finish .score").html(f);
+     $("#finish .play-time").html(d);
+     $("#finish .next-medal").hide();
+    }
+    $("#game").css({
+     display: "none"
+    });
+    $("#finish").css({
+     display: "block"
+    });
+    $("#again").on("touchstart mouseup", function () {
+     l = 0;
+     $("#finish").css({
+      display: "none"
+     });
+     $("#start").css({
+      display: "block"
+     });
+     c(0);
+     return;
+    });
+   }
+   if (e < 6) {
+    h(e);
+   }
+  },
+  h = function (r) {
+   var a = [],
+    h = [],
+    p = [],
+    d = [
+     [-130, 0, 130, 0],
+     [212, -144, 177, -46, 107, -6, 34, 4, -23, 27, -10, -15, -107, -130, -178, -
+      150, -132, -163, -115, -202, -85, -155
+     ],
+     [147, -197, 154, -145, 136, -80, 86, -21, 0, 0, -36, 33, -81, 38, -62, -9, -
+      107, -32, -157, -87, -184, -152, -235, -164, -222, -219, -188, -193, -
+      166, -234, -136, -197, -147, -150, -92, -138
+     ],
+     [-244, -175, -230, -86, -194, -29, -133, 5, -43, 5, -15, 18, 25, 21, 25, -
+      20, 76, -42, 123, -66, 171, -101, 206, -130, 249, -109, 296, -118, 267, -
+      143, 230, -162, 262, -194, 270, -234, 226, -221, 199, -197, 187, -154
+     ],
+     [240, -20, 100, -13, 55, 30, 56, -12, 10, 30, 19, -14, -234, -13, -276, -
+      84, -312, -87, -346, -128, -293, -125, -257, -113, -227, -125, -170, -
+      135, -209, -88, -242, -80, -203, -47, -141, -85, -55, -170, 41, -209,
+      146, -208, 210, -175, 244, -105
+     ],
+     [-216, 0, -268, -75, -283, -146, -279, -203, -245, -218, -75, -191, 97, -
+      152, 213, -145, 238, -164, 243, -205, 174, -222, 154, -249, 216, -252,
+      245, -245, 269, -264, 332, -278, 313, -243, 278, -216, 300, -169, 302, -
+      104, 275, -41, 208, 6, 152, 19, 173, 52, 129, 51, 80, 21, -7, 6, -110, 5
+     ]
+    ];
+   var v = function () {
+    i.setSize($(window).innerWidth(), $(window).innerHeight());
+    for (var t = 0; t < d[r].length; t += 2) {
+     $(a[t / 2]).css({
+      left: d[r][t] + e.width() / 2 - 12,
+      top: d[r][t + 1] + e.height() / 2 - 12
+     });
+     $(h[t / 2]).css({
+      left: d[r][t] + e.width() / 2 - 12,
+      top: d[r][t + 1] + e.height() / 2 - 27
+     });
+    }
+    for (t = 0; t < p.length; t++) {
+     if (p[t].loop) {
+      window.clearInterval(p[t].loop);
+     }
+     p[t].curve.remove();
+     p[t].controls.remove();
+    }
+    $(a).removeClass("full");
+    p = [];
+   };
+   $(window).resize(function () {
+    v();
+   });
+   var m = function (e) {
+    var t = e.toString();
+    while (t.length < 4) {
+     t = "0" + t;
+    }
+    var n = t.substr(0, 2) + ":" + t.substr(2, 2);
+    return n;
+   };
+   var g = function () {
+    var e = 3,
+     t = $("#countdown");
+    t.css({
+     display: "block"
+    });
+    t.find("h1").html(e);
+    $("#timer").html(m(100 * r + 900)).css({
+     display: "block"
+    });
+    var n = window.setInterval(function () {
+     e--;
+     t.find("h1").html(e);
+     if (0 === e) {
+      clearInterval(n);
+      u = null;
+      t.css({
+       display: "none"
+      });
+      y(100 * r + 900);
+      return;
+     }
+    }, 1e3);
+   };
+   var y = function (e) {
+    var t = Date.now();
+    u = window.setInterval(function () {
+     var n = Date.now();
+     var i = Math.round(.1 * (n - t));
+     e -= i;
+     t = n;
+     $("#timer").html(m(e));
+     if (e <= 0) {
+      clearInterval(u);
+      u = null;
+      $("#retry").css({
+       display: "block"
+      }).off().on("click", function () {
+       c(r, a, p, false);
+      });
+      $("#timer").css({
+       display: "none"
+      });
+      return;
+     }
+    }, 1e3 / 100);
+   };
+   var b = function () {
+    for (var t = 0; t < d[r].length; t += 2) {
+     var i = $("<div/>", {
+      class: "dot"
+     }).css({
+      position: "absolute",
+      left: d[r][t] + e.width() / 2 - 12,
+      top: d[r][t + 1] + e.height() / 2 - 12
+     });
+     a.push(i[0]);
+     var s = $("<div/>", {
+      class: "number",
+      html: a.length
+     }).css({
+      position: "absolute",
+      left: d[r][t] + e.width() / 2 - 12,
+      top: d[r][t + 1] + e.height() / 2 - 27
+     });
+     h.push(s[0]);
+    }
+    var o = 0;
+    var u = window.setInterval(function () {
+     if (o > a.length - 1) {
+      clearInterval(u);
+      return;
+     }
+     n.append(a[o]);
+     n.append(h[o]);
+     o++;
+     f.pop();
+    }, 1e3 / 15);
+    w();
+   };
+   var w = function () {
+    var n = function (e, t, n, r, s, o, u) {
+     var a = {
+      path: [
+       ["M", e, t],
+       ["Q", n, r, s, o]
+      ],
+      curve: i.path(this.path).attr({
+       stroke: u,
+       "stroke-width": 10,
+       "stroke-linecap": "round"
+      }),
+      controls: i.set(i.circle(e, t, 5).attr({
+       fill: "#fff",
+       stroke: "none"
+      }), i.circle(n, r, 5).attr({
+       fill: "none",
+       stroke: "none"
+      }), i.circle(s, o, 5).attr({
+       fill: "none",
+       stroke: "none"
+      })),
+      elastic: {
+       currentX: e,
+       currentY: t,
+       targetX: e,
+       targetY: t,
+       vX: 0,
+       vY: 0
+      },
+      startDot: null,
+      endDot: null,
+      correct: false,
+      loop: null
+     };
+     return a;
+    };
+    var u = function (n, i, s, o) {
+     var u = p.length - 1;
+     $(a).off("mouseover");
+     e.off();
+     $(document).off();
+     if (true === n) {
+      var f = p[u],
+       c = $(a[s]).position().left + 12,
+       h = $(a[s]).position().top + 12;
+      f.controls[2].attr({
+       cx: c,
+       cy: h
+      });
+      f.path[1][3] = c;
+      f.path[1][4] = h;
+      f.elastic.targetX = f.controls[0].attr("cx") + 1 * (c - f.controls[0].attr(
+       "cx")) / 2;
+      f.elastic.targetY = f.controls[0].attr("cy") + 1 * (h - f.controls[0].attr(
+       "cy")) / 2;
+      var d = p[u].loop;
+      window.setTimeout(function () {
+       window.clearInterval(d);
+      }, 4e3);
+      f.correct = s - i === 1 || s - i === 1 - a.length ? true : false;
+      if (p.length === a.length || 0 === r) {
+       var v = true;
+       for (var m = 0; m < p.length; m++) {
+        if (!p[m].correct) {
+         v = false;
+        }
+       }
+       if (v) {
+        E();
+        return false;
+       }
+      }
+      if (t.hasClass("touch")) {
+       l(a[s], o);
+      } else {
+       $(a[s]).trigger("mousedown");
+      }
+     } else {
+      $(a[i]).removeClass("full");
+      window.clearInterval(p[u].loop);
+      p[p.length - 1].curve.remove();
+      p[p.length - 1].controls.remove();
+      p.splice(p.length - 1, 1);
+     }
+    };
+    var l = function (t) {
+     $(t).addClass("full");
+     f.pop();
+     var r = -1;
+     for (var i = 0; i < p.length; i++) {
+      if (p[i].startDot === a.indexOf(t)) {
+       r = i;
+      }
+     }
+     if (r >= 0) {
+      if (p[r].loop) {
+       window.clearInterval(p[r].loop);
+      }
+      p[r].curve.remove();
+      p[r].controls.remove();
+      p.splice(r, 1);
+     }
+     p.push(n($(t).position().left + 12, $(t).position().top + 12, $(t).position()
+      .left + 12, $(t).position().top + 12, $(t).position().left + 12, $(t)
+      .position().top + 12, "#e1f6f1"));
+     var l = p[p.length - 1];
+     l.startDot = a.indexOf(t);
+     e.on("touchmove", function (e) {
+      e.preventDefault();
+      var n = e.originalEvent.changedTouches[0].pageX,
+       r = e.originalEvent.changedTouches[0].pageY;
+      l.controls[2].attr({
+       cx: n,
+       cy: r
+      });
+      l.path[1][3] = n;
+      l.path[1][4] = r;
+      l.elastic.targetX = l.controls[0].attr("cx") + 1 * (n - l.controls[0]
+       .attr("cx")) / 2;
+      l.elastic.targetY = l.controls[0].attr("cy") + 1 * (r - l.controls[0]
+       .attr("cy")) / 2;
+      if (!l.loop) {
+       l.loop = window.setInterval(function () {
+        var e = l.elastic;
+        e.vX += (e.targetX - e.currentX) * s;
+        e.currentX += e.vX *= o;
+        e.vY += (e.targetY - e.currentY) * s;
+        e.currentY += e.vY *= o;
+        l.controls[1].attr({
+         cx: e.currentX,
+         cy: e.currentY
+        });
+        l.path[1][1] = e.currentX;
+        l.path[1][2] = e.currentY;
+        l.curve.attr({
+         path: l.path
+        });
+       }, 1e3 / 30);
+      }
+      $(a).each(function (e, i) {
+       if (a.indexOf(t) !== a.indexOf(i)) {
+        var s = $(i).position().left,
+         o = $(i).position().top;
+        if (n > s && r > o && n < s + 24 && r < o + 24) {
+         u(true, a.indexOf(t), a.indexOf(i));
+        }
+       }
+      });
+     });
+     e.on("touchend", function (e) {
+      e.preventDefault();
+      u(false, a.indexOf(t));
+     });
+    };
+    if (t.hasClass("touch")) {
+     $(a).each(function (e, t) {
+      $(t).on("touchstart", function (e) {
+       e.preventDefault();
+       l(t);
+      });
+     });
+    } else {
+     $(a).each(function (t, r) {
+      $(r).on("mousedown", function (t) {
+       $(r).addClass("full");
+       f.pop();
+       var i = -1;
+       for (var l = 0; l < p.length; l++) {
+        if (p[l].startDot === a.indexOf(this)) {
+         i = l;
+        }
+       }
+       if (i >= 0) {
+        if (p[i].loop) {
+         window.clearInterval(p[i].loop);
+        }
+        p[i].curve.remove();
+        p[i].controls.remove();
+        p.splice(i, 1);
+       }
+       p.push(n($(r).position().left + 12, $(r).position().top + 12, t.pageX,
+        t.pageY, t.pageX, t.pageY, "#e1f6f1"));
+       var c = p[p.length - 1];
+       c.startDot = a.indexOf(this);
+       e.on("mousemove", function (e) {
+        var t = e.pageX,
+         n = e.pageY;
+        c.controls[2].attr({
+         cx: t,
+         cy: n
+        });
+        c.path[1][3] = t;
+        c.path[1][4] = n;
+        c.elastic.targetX = c.controls[0].attr("cx") + 1 * (t - c.controls[
+         0].attr("cx")) / 2;
+        c.elastic.targetY = c.controls[0].attr("cy") + 1 * (n - c.controls[
+         0].attr("cy")) / 2;
+        if (!c.loop) {
+         c.loop = window.setInterval(function () {
+          var e = c.elastic;
+          e.vX += (e.targetX - e.currentX) * s;
+          e.currentX += e.vX *= o;
+          e.vY += (e.targetY - e.currentY) * s;
+          e.currentY += e.vY *= o;
+          c.controls[1].attr({
+           cx: e.currentX,
+           cy: e.currentY
+          });
+          c.path[1][1] = e.currentX;
+          c.path[1][2] = e.currentY;
+          c.curve.attr({
+           path: c.path
+          });
+         }, 1e3 / 30);
+        }
+       });
+       $(a).on("mouseover", function () {
+        if (a.indexOf(r) !== a.indexOf(this)) {
+         u(true, a.indexOf(r), a.indexOf(this));
+        }
+       });
+       e.on("mouseup", function () {
+        u(false, a.indexOf(r));
+       });
+       $(document).on("mouseout", function (e) {
+        e = e ? e : window.event;
+        var t = e.relatedTarget || e.toElement;
+        if (!t || "HTML" == t.nodeName) {
+         u(false, a.indexOf(r));
+        }
+       });
+      });
+     });
+    }
+   };
+   var E = function () {
+    f.pop();
+    if (u || 0 === r) {
+     if (0 === r) {
+      c(r + 1, a, p, true);
+     } else {
+      var e = parseInt($("#timer").html().split(":").join(""));
+      l += e;
+      window.clearInterval(u);
+      u = null;
+      $("#nice").css({
+       display: "block"
+      });
+      setTimeout(function () {
+       $("#nice").css({
+        display: "none"
+       });
+       c(r + 1, a, p, true);
+      }, 2e3);
+     }
+    }
+   };
+   b();
+   if (r > 0) {
+    g();
+   }
+  },
+  p = function () {
+   var e = function (e) {
+    var t = parseInt(100 * e);
+    loadVal = t;
+   };
+   var t = ["img/img_dot.png", "img/img_dot-full.png", "img/img_end.png",
+    "img/img_end-br.png", "img/img_end-si.png", "img/img_end-go.png",
+    "img/img_retry.png", "img/img_play-again.png"
+   ];
+   Preloader.initialize(t, null, e);
+  };
+ return {
+  init: function () {
+   p();
+   c(0);
+   $(window).load(function () {
+    $(".content, footer").removeClass("hide");
+   });
+   $(document).on("touchmove", function (e) {
+    e.preventDefault();
+   });
+  }
+ };
+}();
Index: jsbin-mod/public/js/ibex/views/HeaderControlView.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jsbin-mod/public/js/ibex/views/HeaderControlView.js	(date 1484779740000)
+++ jsbin-mod/public/js/ibex/views/HeaderControlView.js	(revision )
@@ -177,12 +177,12 @@
           bargap: 0.1
         };
 
-        Plotly.newPlot($plotEl[0], data, layout);
+        // Plotly.newPlot($plotEl[0], data, layout);
       } else {
-        Plotly.restyle($plotEl[0], {
-          x: [x],
-          y: [y]
-        });
+        // Plotly.restyle($plotEl[0], {
+        //   x: [x],
+        //   y: [y]
+        // });
       }
     },
 
