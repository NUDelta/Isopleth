Index: chrome-extension/js/views/PanelView.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chrome-extension/js/views/PanelView.js	(date 1490645293000)
+++ chrome-extension/js/views/PanelView.js	(revision )
@@ -37,6 +37,7 @@
       this.$el.html(this.template());
 
       if (unravelAgentActive) {
+        this.$(".restart-mode").hide();
         this.$(".active-mode").show();
 
         this.createBin(); //Right after chrome injection, before fondue installed
@@ -44,7 +45,6 @@
         this.ibexSocketRouter.on("connected", this.onBinReady, this);
       } else {
         this.$(".restart-mode").show();
-        return;
       }
     },
 
Index: chrome-extension/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chrome-extension/manifest.json	(date 1490645293000)
+++ chrome-extension/manifest.json	(revision )
@@ -4,11 +4,11 @@
   "description": "Extract behaviors from UI",
   "minimum_chrome_version": "22.0",
   "manifest_version": 2,
-  "devtools_page": "devtools.html",
+//  "devtools_page": "devtools.html",
   "browser_action": {
 //    "default_icon": "img/ibex-small.png",
 //    "default_title": "__MSG_extension_name__",
-//    "default_popup": "popup.html"
+    "default_popup": "popup.html"
   },
   "background": {
     "scripts": [
Index: chrome-extension/js/requireConfig.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chrome-extension/js/requireConfig.js	(date 1490645293000)
+++ chrome-extension/js/requireConfig.js	(revision )
@@ -43,31 +43,38 @@
 require([
   "jquery",
   "backbone",
+  "underscore",
   "routers/PanelRouter"
-], function ($, Backbone, PanelRouter) {
+], function ($, Backbone, _, PanelRouter) {
   $(document).ready(function () {
     var router = new PanelRouter();
     Backbone.history.start();
 
-    var tabId = chrome.devtools.inspectedWindow.tabId;
-    var panelPort = chrome.extension.connect({name: "devtoolspanel"});
-    panelPort.postMessage({
-      name: "identification",
-      data: tabId
-    });
+    var onTabId = _.bind(function (tabArray) {
+      var tabId = tabArray[0].id;
+      // var tabId = chrome.devtools.inspectedWindow.tabId;
+      var panelPort = chrome.extension.connect({name: "devtoolspanel"});
+      panelPort.postMessage({
+        name: "identification",
+        data: tabId
+      });
 
-    panelPort.onMessage.addListener(_.bind(function (message) {
-      if (message && message.target == "page" && message.name == "mutation") {
-        router.trigger("mutation", message.data);
-      } else if (message && message.target == "page" && message.name == "JSTrace") {
-        router.trigger("JSTrace", message.data);
-      } else if (message && message.target == "page" && message.name == "fondueDTO") {
-        router.trigger("fondueDTO", message.data);
-      } else if (message && message.target == "page" && message.name == "ContentScriptReloaded") {
-        router.trigger("ContentScriptReloaded", message.data);
-      } else if (message && message.target == "page" && message.name == "TabUpdate") {
-        router.trigger("TabUpdate", message.data);
-      }
-    }, this));
+      panelPort.onMessage.addListener(_.bind(function (message) {
+        if (message && message.target == "page" && message.name == "mutation") {
+          router.trigger("mutation", message.data);
+        } else if (message && message.target == "page" && message.name == "JSTrace") {
+          router.trigger("JSTrace", message.data);
+        } else if (message && message.target == "page" && message.name == "fondueDTO") {
+          router.trigger("fondueDTO", message.data);
+        } else if (message && message.target == "page" && message.name == "ContentScriptReloaded") {
+          router.trigger("ContentScriptReloaded", message.data);
+        } else if (message && message.target == "page" && message.name == "TabUpdate") {
+          router.trigger("TabUpdate", message.data);
+        }
+      }, this));
+
+    }, this);
+
+    chrome.tabs.query({currentWindow: true, active: true}, onTabId);
   });
 });
Index: chrome-extension/popup.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chrome-extension/popup.html	(revision )
+++ chrome-extension/popup.html	(revision )
@@ -0,0 +1,11 @@
+<!doctype html>
+<html>
+<head>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1.0">
+  <script src="js/lib/socket.io-1.4.5.js"></script>
+  <script data-main="js/requireConfig.js" src="js/lib/require.js"></script>
+</head>
+<body>
+</body>
+</html>
\ No newline at end of file
Index: chrome-extension/js/agents/UnravelAgent.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chrome-extension/js/agents/UnravelAgent.js	(date 1490645293000)
+++ chrome-extension/js/agents/UnravelAgent.js	(revision )
@@ -18,7 +18,7 @@
              introJSInjector,
              introJSBridgeInjector,
              highlightJSInjector,
-             html2canvasInjector) {
+             html2canvasInjector, $) {
   function UnravelAgent() {
     if (!(this instanceof UnravelAgent)) {
       throw new TypeError("UnravelAgent constructor cannot be called as a function.");
@@ -27,7 +27,13 @@
 
   UnravelAgent.reloadInjecting = function () {
     var agentFn = function () {
-      window.unravelAgent = {};
+      window.unravelAgent = {
+        checkTracer: function(){
+          debugger;
+          console.log(!!window.__tracer)
+          return !!window.__tracer;
+        }
+      };
     };
 
     var goFondue = function () {
@@ -37,7 +43,7 @@
     };
 
     //Order is important here
-    var start = "if (window.self === window.top) {";
+    var start = "function _foo (){   if (window.self === window.top) { \n";
     var f1 = "(" + agentFn.toString() + ").apply(this, []); ";
     var f2 = "(" + jQueryInjector.toString() + ").apply(this, []); ";
     var f3 = "(" + underscoreInjector.toString() + ").apply(this, []); ";
@@ -50,37 +56,33 @@
     var f11 = "(" + introJSBridgeInjector.toString() + ").apply(this, []); ";
     var f12 = "(" + html2canvasInjector.toString() + ").apply(this, []); ";
     var f13 = "(" + goFondue.toString() + ").apply(this, []); ";
-    var end = " } ";
+    var end = " }   }      \n         var elt = document.createElement('script');  elt.innerHTML = _foo.toString() + ' _foo()';   document.head.appendChild(elt);    ";
 
-    chrome.devtools.inspectedWindow.reload({
-      ignoreCache: true,
-      injectedScript: start + f1 + f2 + f3 + f5 + f6 + f7 + f8 + f9 + f10 + f11 + f12 + f13 + end
-    });
+    var injectedScript = start + f1 + f2 + f3 + f5 + f6 + f7 + f8 + f9 + f10 + f11 + f12 + f13 + end;
 
-    var checkTimeout = function (isActive) {
-      if (isActive) {
-        window.location.href = "";
-      } else {
-        window.setTimeout(function () {
-          UnravelAgent.checkActive(checkTimeout)
-        }, 1000);
-      }
-    };
-
-    checkTimeout(false);
+    chrome.tabs.executeScript(null, {
+      code: injectedScript
+    }, function () {
+      console.log("UnravelAgent injected.")
+    });
   };
 
   //public static
   UnravelAgent.checkActive = function (callback) {
+    console.log("Checking for __tracer...");
     UnravelAgent.runInPage(function () {
-      return !!window.unravelAgent;
+      return window.unravelAgent && unravelAgent.checkTracer();
     }, callback);
   };
 
   UnravelAgent.runInPage = function (fn, callback) {
     var args = Array.prototype.slice.call(arguments, 2);
     var evalCode = "(" + fn.toString() + ").apply(this, " + JSON.stringify(args) + ");";
-    chrome.devtools.inspectedWindow.eval(evalCode, {}, callback);
+    chrome.tabs.executeScript(null, {
+      code: evalCode
+    }, function (args) {
+      callback.apply(this, args);
+    });
   };
 
   UnravelAgent.prototype = {
Index: chrome-extension/js/routers/PanelRouter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- chrome-extension/js/routers/PanelRouter.js	(date 1490645293000)
+++ chrome-extension/js/routers/PanelRouter.js	(revision )
@@ -17,40 +17,52 @@
     start: function () {
       this.homeView = new HomeView();
       var router = this;
-
-      UnravelAgent.checkActive(function (isActive) {
-        router.unravelAgent = new UnravelAgent();
-        router.homeView.render(isActive);
-        document.body.appendChild(router.homeView.el);
+      router.unravelAgent = new UnravelAgent();
+      router.homeView.render(false);
+      document.body.appendChild(router.homeView.el);
+
+      var checkTimeout = function (isActive) {
         if (!isActive) {
-          return;
-        }
+          UnravelAgent.checkActive(function (resultActive) {
+
+            if (!resultActive) {
+              window.setTimeout(function () {
+                checkTimeout(resultActive);
+              }, 1000);
+            } else {
+              checkTimeout(true);
+            }
+          });
+        } else {
+          router.homeView.render(true);
 
-        router.on("fondueDTO", function (data) {
-          router.homeView.handleFondueDto(data);
-        }, router);
+          router.on("fondueDTO", function (data) {
+            router.homeView.handleFondueDto(data);
+          }, router);
 
-        router.on("ContentScriptReloaded", function (data) {
-          if (!this.heardReload) {
-            this.heardReload = true;
+          router.on("ContentScriptReloaded", function (data) {
+            if (!this.heardReload) {
+              this.heardReload = true;
 
-            UnravelAgent.runInPage(function () {
-              window.dispatchEvent(new CustomEvent("StopCSReloadEmitter"));
-            }, function onRunDone(){
-              router.homeView.onFondueReady();
-            });
-          }
-        }, router);
+              UnravelAgent.runInPage(function () {
+                window.dispatchEvent(new CustomEvent("StopCSReloadEmitter"));
+              }, function onRunDone() {
+                router.homeView.onFondueReady();
+              });
+            }
+          }, router);
 
-        router.on("TabUpdate", function (data) {
-          UnravelAgent.checkActive(function (isActive) {
-            if (!isActive) {
-              window.location.href = "";
-            }
-          });
-        }, router);
+          router.on("TabUpdate", function (data) {
+            UnravelAgent.checkActive(function (isActive) {
+              if (!isActive) {
+                window.location.href = "";
+              }
+            });
+          }, router);
+        }
+      };
 
-      });
+      checkTimeout(false);
     }
   });
 });
Index: invocation_tracing__html2canvas.patch
===================================================================
--- invocation_tracing__html2canvas.patch	(date 1490645293000)
+++ invocation_tracing__html2canvas.patch	(date 1490645293000)
@@ -1,116 +0,0 @@
-Index: chrome-extension/js/injectors/fondueInjector.js
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- chrome-extension/js/injectors/fondueInjector.js	(date 1485473528000)
-+++ chrome-extension/js/injectors/fondueInjector.js	(revision )
-@@ -10,9 +10,14 @@
-         this.totalInvocations = 0;
-       };
- 
--      FondueBridge.MAX_LOG_COUNT = 3000;
--      FondueBridge.MAX_STACK_DEPTH = 20;
--      FondueBridge.EMIT_INTERVAL_MILLIS = 3000;
-+      // FondueBridge.MAX_LOG_COUNT = 3000;
-+      // FondueBridge.MAX_STACK_DEPTH = 20;
-+      // FondueBridge.EMIT_INTERVAL_MILLIS = 3000;
-+
-+
-+      FondueBridge.MAX_LOG_COUNT = 999999;
-+      FondueBridge.MAX_STACK_DEPTH = 999999;
-+      FondueBridge.EMIT_INTERVAL_MILLIS = 2000;
- 
-       FondueBridge.prototype = {
-         constructor: FondueBridge,
-@@ -23,7 +28,6 @@
- 
-         getNewNodes: function () {
-           // if (!this.nodesHandle) {
--          //   debugger;
-           //   this.nodesHandle = window.__tracer.trackNodes();
-           // }
- 
-@@ -82,6 +86,7 @@
-               endLine: node.end.line,
-               endColumn: node.end.column,
-               childrenIds: node.childrenIds,
-+              source: node.source,
-               hits: 0,
-               invokes: []
-             };
-@@ -120,6 +125,18 @@
-           });
-         },
- 
-+        emitScreenCapture: function () {
-+          unravelAgent.html2canvas(document.body).then(function (canvas) {
-+            window.dispatchEvent(new CustomEvent("fondueDTO", {
-+                detail: {
-+                  eventStr: "fondueDTO:screenCapture",
-+                  obj: {dataURL: canvas.toDataURL('image/jpeg', 1.0)}
-+                }
-+              })
-+            );
-+          });
-+        },
-+
-         emitNodeActivity: function () {
-           try {
-             //Get the last n javascript calls logged
-@@ -143,35 +160,33 @@
-               }
- 
-               invocation.node = node;
--              if (node.domQuery || this.isDomQueryNode(node)) {
--                invocation.callStack = unravelAgent._(__tracer.backtrace({
--                  invocationId: invocation.invocationId,
--                  range: [0, FondueBridge.MAX_STACK_DEPTH]
--                })).reverse();
-+              // if (node.domQuery || this.isDomQueryNode(node)) {
-+              invocation.callStack = unravelAgent._(__tracer.backtrace({
-+                invocationId: invocation.invocationId,
-+                range: [0, FondueBridge.MAX_STACK_DEPTH]
-+              })).reverse();
- 
--                //Remove the last item on the stack, === the invocation
--                if (invocation.callStack.length > 0) {
--                  invocation.callStack.pop();
--                }
--              } else {
--                invocation.callStack = [];
-+              //Remove the last item on the stack, === the invocation
-+              if (invocation.callStack.length > 0) {
-+                invocation.callStack.pop();
-               }
-+              // } else {
-+              //   invocation.callStack = [];
-+              // }
-             }, this);
- 
-             // if (arrInvocations.length < FondueBridge.MAX_LOG_COUNT) {
--            if (unravelAgent.scriptLoadComplete) {
--              __tracer.softReset(this.logHandle);
--            }
-+            // if (unravelAgent.scriptLoadComplete) {
-+            //   __tracer.softReset(this.logHandle);
-+            // }
-             // }
- 
--            var logLength = __tracer.getLogLength(this.logHandle);
--            if (logLength > 10000) {
--              console.log("Remaining Log Length is too large:", logLength, "... clearing.");
--              this.updateTrackedNodes();
--              __tracer.softReset(this.logHandle);
--              // __tracer.clearLogs(this.logHandle);
--            }
--
-+            // var logLength = __tracer.getLogLength(this.logHandle);
-+            // if (logLength > 10000) {
-+            //   console.log("Remaining Log Length is too large:", logLength, "... clearing.");
-+            //   this.updateTrackedNodes();
-+            //   __tracer.softReset(this.logHandle);
-+            // }
- 
-             window.dispatchEvent(new CustomEvent("fondueDTO", {
-                 detail: {
